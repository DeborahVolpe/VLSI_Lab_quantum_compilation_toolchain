import sys
from sys import argv
import os
import re
import configparser

sys.path.append('./libraries/')
from step2_techlib import *
from NULLOP_purgers import *

########################################################################################################
############################################ INPUTS ####################################################
########################################################################################################

argn = len(argv)

### Input parameters:

#   1) Name of the .qasm file to techoptimize (must be in working directory)

#   2) Subcircuit parameter: if T (true), circuit is a subcircuit, there are no final measurements and thus purge of final RZ gates can't be applied.
#      If F (false) or NULL, the .qasm defines a complete circuit and all the optimizations can be applied.

### - Qubits are still treated as ideal and fully-connected

### - Script work only with .qasm files whose first 4 lines are OPENQASM 2.0; include "qelib1.inc"; qreg q[..]; creg c[..]; followed by the circuit gates

### - NOTE: with an high precision in approximation, Gimbal Lock warnings may occur during computation when using scipy's Euler transformations. Do not worry about that.


# Check input validity

if argn == 1:

    print("\n Input parameters required!\n")
    sys.exit(0)

else:

    # Check if input file is a .qasm

    qasm = argv[1]

    if qasm[-5:] != ".qasm":
        print("\n The script only accepts .qasm files as inputs! \n")
        sys.exit(0)

    # Check if .qasm file is in working directory

    qasm = "./" + qasm

    if not os.path.isfile(qasm):

        print("\n The input .qasm file must be in th working directory for the script to work!\n")
        sys.exit(0)

    # Check if Subcircuit parameter is True

    if (argn == 3) and ( (argv[2] == "T") or (argv[2] == "true") ):

        subcircuit = 1

    elif ( (argn == 3) and ( (argv[2] == "F") or (argv[2] == "false") ) ) or (argn == 2):
        
        subcircuit = 0

    elif (argn == 3) and (argv[2] != "F") and (argv[2] != "T") and (argv[2] != "false") and (argv[2] != "true"): 

        print("\n Subcircuit parameter unknown: only acceptable inputs are T (true) or F (false). \n")
        sys.exit(0)

    else:

        print("\n Wrong number of input parameters! \n")
        sys.exit(0)


### Reading of .qasm file name to determine if it was generated by Step 1. This is done for the purpose of generating the output file name.

if (qasm[-15:] == "_optimized.qasm"):

    autodetect = 1

else:

    autodetect = 0


### Reading of thresholds.cfg file and precision thresholds evaluation
    

config = configparser.RawConfigParser()
config.read('./cfg/thresholds.cfg')

cfg = []
i = 0

for section in config.sections():
    for option in config.options(section):
        text = '{} {}'.format(option, config.get(section,option))
        cfg.append(text[5:])
        i += 1

# Pi approximation evaluation
# Maximum precision: 10^-15

pi = 3.141592653589793
halfpi = 1.570796326794896
quarterpi = 0.785398163397448

r1 = cfg[0].replace(' ','')

if (r1[3] != "-") or (int(r1[4:]) <= 0):
    print("\n Error in thresholds.cfg : you can't use a precision equal to or above 1! \n")
    sys.exit(0)

r1 = int(r1[4:])
pi = round(pi, r1)
pi = str(pi)
halfpi = round(halfpi, r1)
halfpi = str(halfpi)
quarterpi = round(quarterpi, r1)
quarterpi = str(quarterpi)

# NULL Sum evaluation

r2 = cfg[1]
r2 = int(r2[3:])
nullsum = pow(10,r2)

if nullsum >= 0.1:
    print("\n Warning: you are using a very high NULL Operations approximation value. This may result in an excessive purging of gates. \n")

### Reading of ion_translation.cfg file for generic translation parameters    

config = configparser.RawConfigParser()
config.read('./cfg/ion_translation.cfg')

cfg = []
i = 0

for section in config.sections():
    for option in config.options(section):
        text = '{} {}'.format(option, config.get(section,option))
        cfg.append(text[8:])
        i += 1

# If iontran parameter unrecognized, set it as false

iontran = cfg[0].replace(' ','')
if iontran != 'T':
    iontran = 'F'


### Technology input parameter evaluation

tech = input("Please define the quantum technology to be implemented. Type 'M' for NMR Molecular technology, 'Q' for Quantum Dot technology, 'I' for Trapped Ions technology, or 'S' for Superconductive technology \n")

if (tech != 'M') and (tech != 'I') and (tech != 'S') and (tech != 'Q'):
    print("\n Unrecognized quantum technology. Be sure to use the right input parameter, and try again.\n")
    sys.exit(0)

########################################################################################################
############################################ PARSER ####################################################
########################################################################################################

### Creation of "lines" list, filtered from end line spaces, blank lines, Barriers, Comments and Measures

f = open(qasm, "r")

lines = list(filter(None, (line.rstrip() for line in f)))

f.close()

# Comments elimination
N = len(lines)
for i in range(0,N):
    x = lines[i]
    n = x.find('//')
    if n > 0:
        lines[i] = x[:n]
    elif n == 0:
        lines[i] = ''

# Creation of the "meas" measurements list, that will be added again on the optimized list

meas = []
meas = [x for x in lines if x[0:7] == "measure"]

lines = [x for x in lines if x[0:7] != "barrier"]
lines = [x for x in lines if x[0:7] != "measure"]

lines = list(filter(None, (line.rstrip() for line in lines)))

# Cleansing of all spaces in strings except the first one for parsing purposes (except in R gates, where spaces are useless and thus purged)

N = len(lines)
for i in range(0,N):

    a = lines[i]
    if a[0] != "r":
        a = a.replace(' ', 'SPACE')
        a = a.replace('SPACE', ' ', 1)
        a = a.replace('SPACE', '')
    else:
        a = a.replace(' ', '')
    lines[i] = a


# Qubits number variable "nq" creation

x = lines[2]
l = len(x)
for i in range(0,l):
    if x[i] == "[":
        break
nq = x[i+1:]
nq = nq.replace('];','').replace(' ','')
nq = int(nq)


########################################################################################################
######################################## NMR/QUANTUM DOT OPTIMIZER #####################################
########################################################################################################
#
#
############################ REFERENCE LIBRARY: step2_techlib.py

if ( (tech == "M") or (tech == 'Q') ):

    NMRlib(lines, nq, subcircuit, nullsum)
    
########################################################################################################
################################## TRAPPED IONS OPTIMIZER ##############################################
########################################################################################################
#
#
############################ REFERENCE LIBRARY: step2_techlib.py

if (tech == "I"):

    ionslib(lines, nq, subcircuit, nullsum, pi, halfpi, quarterpi, iontran)

########################################################################################################
################################## SUPERCONDUCTING OPTIMIZER ###########################################
########################################################################################################
#
#
############################ REFERENCE LIBRARY: step2_techlib.py

if (tech == "S"):

    supercondlib(lines, nq, subcircuit, nullsum, pi, halfpi, quarterpi)


########################################################################################################
############################################ OUTPUTS ###################################################
########################################################################################################

### Generate an optimized .qasm file from "lines" circuit list

if autodetect == 1:         # If input file was generated by Step 1, substitute "_optimized" with technology parameter + "_techoptimized"

    newqasm = qasm[:-15] + "_" + tech + "_techoptimized.qasm"

else:                       # If input file was not recognized as generated by Step 1, simply append technology parameter + "_techoptimized" to the name

    newqasm = qasm[:-5] + "_" + tech + "_techoptimized.qasm"

output = open(newqasm, "w")

for x in lines:

    output.write("%s\n" % x)

# If not a subcircuit, re-add measurements at the end

if subcircuit == 0:

    l = len(meas)
    for i in range(0,l):
        output.write(meas[i]+"\n")

output.close()

print("\n OPTIMIZATION DONE. OPTIMIZED QASM FILE IS: " + newqasm + "\n")

sys.exit(0)


